<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Prim</title>
      <link href="/Prim/"/>
      <url>/Prim/</url>
      
        <content type="html"><![CDATA[<h3 id="Prim算法是一种用于计算加权无向连通图的最小生成树的经典算法。以下是该算法的C-实现："><a href="#Prim算法是一种用于计算加权无向连通图的最小生成树的经典算法。以下是该算法的C-实现：" class="headerlink" title="Prim算法是一种用于计算加权无向连通图的最小生成树的经典算法。以下是该算法的C++实现："></a>Prim算法是一种用于计算加权无向连通图的最小生成树的经典算法。以下是该算法的C++实现：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prim</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; A, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = A.<span class="built_in">size</span>();           <span class="comment">// 表示图中顶点的数量</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">U</span><span class="params">(n, <span class="number">0</span>)</span></span>;        <span class="comment">// U[i]=1表示顶点i已加入最小生成树</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">closest</span><span class="params">(n)</span></span>;     <span class="comment">// closest[i]表示与顶点i最近的树中顶点</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lowcost</span><span class="params">(n, INT_MAX)</span></span>;  <span class="comment">// lowcost[i]表示顶点i与树中顶点的最小权重</span></span><br><span class="line"><span class="type">int</span> mincost;</span><br><span class="line"><span class="comment">// 初始化：将v作为起始顶点，更新其他点到v的距离</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">closest[i] = v;</span><br><span class="line">lowcost[i] = A[v][i];</span><br><span class="line">&#125;</span><br><span class="line">U[v] = <span class="number">1</span>;  <span class="comment">// 将起始顶点加入树中</span></span><br><span class="line"><span class="comment">// 循环n-1次，每次添加一个新顶点到最小生成树</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">mincost = INT_MAX;</span><br><span class="line"><span class="type">int</span> u = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 在所有未加入树的顶点中找到距离树最近的顶点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (U[j] == <span class="number">0</span> &amp;&amp; lowcost[j] &lt; mincost) &#123;</span><br><span class="line">mincost = lowcost[j];</span><br><span class="line">u = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查图的连通性</span></span><br><span class="line"><span class="keyword">if</span> (u == <span class="number">-1</span> || mincost == INT_MAX) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;图不连通！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选择边 (&quot;</span> &lt;&lt; closest[u] &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; u &lt;&lt; <span class="string">&quot;) 权重: &quot;</span> &lt;&lt; mincost &lt;&lt; endl;</span><br><span class="line">U[u] = <span class="number">1</span>;  <span class="comment">// 将顶点u加入树中</span></span><br><span class="line"><span class="comment">// 更新其他未加入树的顶点到树的距离</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (U[j] == <span class="number">0</span> &amp;&amp; A[u][j] &lt; lowcost[j]) &#123;</span><br><span class="line">lowcost[j] = A[u][j];</span><br><span class="line">closest[j] = u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/Dijkstra/"/>
      <url>/Dijkstra/</url>
      
        <content type="html"><![CDATA[<!-- 添加jQuery依赖 --><script src="https://code.jquery.com/jquery-3.6.0.min.js"></script><!-- 添加雪花效果脚本 --><script src="D:\桌面\html\My blog\source\js\snow.js"></script><h3 id="Dijkstra算法是一种用于计算单源最短路径的经典算法。以下是该算法的C-实现："><a href="#Dijkstra算法是一种用于计算单源最短路径的经典算法。以下是该算法的C-实现：" class="headerlink" title="Dijkstra算法是一种用于计算单源最短路径的经典算法。以下是该算法的C++实现："></a>Dijkstra算法是一种用于计算单源最短路径的经典算法。以下是该算法的C++实现：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; A, <span class="type">int</span> v, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">S</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dist[i] = A[v][i];</span><br><span class="line">        S[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 对剩下的n-1个顶点进行处理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> mindis = INT_MAX;</span><br><span class="line">        <span class="type">int</span> u = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!S[j] &amp;&amp; dist[j] &lt; mindis) &#123;</span><br><span class="line">                mindis = dist[j];</span><br><span class="line">                u = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">break</span>;  <span class="comment">// 找不到就退出</span></span><br><span class="line">        S[u] = <span class="literal">true</span>;  <span class="comment">// 否则就标记为true</span></span><br><span class="line">        <span class="comment">// 更新其他顶点的到源点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!S[j] &amp;&amp; A[u][j] != INT_MAX &amp;&amp; </span><br><span class="line">                dist[u] != INT_MAX &amp;&amp; </span><br><span class="line">                dist[u] + A[u][j] &lt; dist[j]) &#123;</span><br><span class="line">                dist[j] = dist[u] + A[u][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; dist[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近刚学，简单记录一下。</p>]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/first%20blog%20to%20text/"/>
      <url>/first%20blog%20to%20text/</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="I-am-happy-to-be-here-and-I-really-learnt-a-lot-of-knowledge"><a href="#I-am-happy-to-be-here-and-I-really-learnt-a-lot-of-knowledge" class="headerlink" title="I am happy to be here and I really learnt a lot of knowledge !"></a>I am happy to be here and I really learnt a lot of knowledge !</h3><p><script async src="https://npm.elemecdn.com/tzy-blog/lib/js/other/sakura.js"></script></p><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=708074892&bvid=BV1RQ4y1j7xf&cid=1386829750&p=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div><embed src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf" width="100%" height="750" type="application/pdf">]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
